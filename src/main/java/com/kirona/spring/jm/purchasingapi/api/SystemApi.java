/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.kirona.spring.jm.purchasingapi.api;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import com.kirona.spring.jm.purchasingapi.model.GetOrderResponse;
import com.kirona.spring.jm.purchasingapi.model.GetRequisitionResponse;
import com.kirona.spring.jm.purchasingapi.model.StockEnquiryResponse;
import com.kirona.spring.jm.purchasingapi.model.SubmitGRNRequest;
import com.kirona.spring.jm.purchasingapi.model.SubmitGRNResponse;
import com.kirona.spring.jm.purchasingapi.model.SubmitRequisitionRequest;
import com.kirona.spring.jm.purchasingapi.model.SubmitRequisitionResponse;

import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-03-18T08:40:04.204Z[GMT]")
@Api(value = "{system}", description = "the {system} API")
@RequestMapping("/jm/purchasing")
public interface SystemApi {

    SystemApiDelegate getDelegate();

    @ApiOperation(value = "Get details of a specific purchase order by ID", nickname = "getOrder", notes = "", response = GetOrderResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = { 
            @AuthorizationScope(scope = "purchasing", description = "Access to the purchasing API")
            })    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Purchase Order Details", response = GetOrderResponse.class),
        @ApiResponse(code = 400, message = "Bad Request - invalid or insufficient data supplied", response = String.class),
        @ApiResponse(code = 500, message = "Internal Error", response = String.class) })
    @RequestMapping(value = "/{system}/{organisationId}/order/{orderId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    default ResponseEntity<GetOrderResponse> getOrder(@ApiParam(value = "ID of JM system (on premises install ID)", required=true) @PathVariable("system") String system, @ApiParam(value = "organisation ID within the JM system", required=true) @PathVariable("organisationId") String organisationId, @ApiParam(value = "external ID of the order", required=true) @PathVariable("orderId") String orderId) {
        return getDelegate().getOrder(system, organisationId, orderId);
    }


    @ApiOperation(value = "Get updated details and status of a requisition", nickname = "getRequisition", notes = "", response = GetRequisitionResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = { 
            @AuthorizationScope(scope = "purchasing", description = "Access to the purchasing API")
            })    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Requisition Details", response = GetRequisitionResponse.class),
        @ApiResponse(code = 400, message = "Bad Request - invalid or insufficient data supplied", response = String.class),
        @ApiResponse(code = 500, message = "Internal Error", response = String.class) })
    @RequestMapping(value = "/{system}/{organisationId}/requisition/{requisitionId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    default ResponseEntity<GetRequisitionResponse> getRequisition(@ApiParam(value = "ID of JM system (on premises install ID)", required=true) @PathVariable("system") String system, @ApiParam(value = "organisation ID within the JM system", required=true) @PathVariable("organisationId") String organisationId, @ApiParam(value = "external ID of the requisition", required=true) @PathVariable("requisitionId") String requisitionId) {
        return getDelegate().getRequisition(system, organisationId, requisitionId);
    }


    @ApiOperation(value = "Search for supplier related stock details. Returns details of all supplier part numbers matching the criteria.", nickname = "stockEnquiry", notes = "", response = StockEnquiryResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = { 
            @AuthorizationScope(scope = "purchasing", description = "Access to the purchasing API")
            })    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Stock Enquiry Results", response = StockEnquiryResponse.class),
        @ApiResponse(code = 400, message = "Bad Request - invalid or insufficient data supplied", response = String.class),
        @ApiResponse(code = 500, message = "Internal Error", response = String.class) })
    @RequestMapping(value = "/{system}/{organisationId}/stockenquiry",
        produces = "application/json", 
        method = RequestMethod.GET)
    default ResponseEntity<StockEnquiryResponse> stockEnquiry(@ApiParam(value = "ID of JM system (on premises install ID)", required=true) @PathVariable("system") String system, @ApiParam(value = "organisation ID within the JM system", required=true) @PathVariable("organisationId") String organisationId, @NotNull @ApiParam(value = "JM Stock Code (aka manufacturer part code)", required = true) @Valid @RequestParam(value = "stockCode", required = true) String stockCode, @ApiParam(value = "ID (in the external system) of the supplier (optional)") @Valid @RequestParam(value = "extSupplierId", required = false) String extSupplierId) {
        return getDelegate().stockEnquiry(system, organisationId, stockCode, extSupplierId);
    }


    @ApiOperation(value = "Submit a GRN (Goods Received Note) from JM to the purchasing system", nickname = "submitGRN", notes = "", response = SubmitGRNResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = { 
            @AuthorizationScope(scope = "purchasing", description = "Access to the purchasing API")
            })    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Purchase Order Details", response = SubmitGRNResponse.class),
        @ApiResponse(code = 400, message = "Bad Request - invalid or insufficient data supplied", response = String.class),
        @ApiResponse(code = 500, message = "Internal Error", response = String.class) })
    @RequestMapping(value = "/{system}/{organisationId}/grn",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    default ResponseEntity<SubmitGRNResponse> submitGRN(@ApiParam(value = "ID of JM system (on premises install ID)", required=true) @PathVariable("system") String system, @ApiParam(value = "organisation ID within the JM system", required=true) @PathVariable("organisationId") String organisationId, @ApiParam(value = "" ) @Valid @RequestBody SubmitGRNRequest body) {
        return getDelegate().submitGRN(system, organisationId, body);
    }


    @ApiOperation(value = "Submit a new requisition to the target purchasing system", nickname = "submitRequisition", notes = "", response = SubmitRequisitionResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = { 
            @AuthorizationScope(scope = "purchasing", description = "Access to the purchasing API")
            })    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Requisition Created", response = SubmitRequisitionResponse.class),
        @ApiResponse(code = 400, message = "Bad Request - invalid or insufficient data supplied", response = String.class),
        @ApiResponse(code = 500, message = "Internal Error", response = String.class) })
    @RequestMapping(value = "/{system}/{organisationId}/requisition",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    default ResponseEntity<SubmitRequisitionResponse> submitRequisition(@ApiParam(value = "ID of JM system (on premises install ID)", required=true) @PathVariable("system") String system, @ApiParam(value = "organisation ID within the JM system", required=true) @PathVariable("organisationId") String organisationId, @ApiParam(value = "" ) @Valid @RequestBody SubmitRequisitionRequest body) {
        return getDelegate().submitRequisition(system, organisationId, body);
    }

}

